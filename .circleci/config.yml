# Based on configuration of https://github.com/google/goexpect
# Copyright (c) 2015 The Go Authors. All rights reserved.

# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:

#    * Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#    * Redistributions in binary form must reproduce the above
# copyright notice, this list of conditions and the following disclaimer
# in the documentation and/or other materials provided with the
# distribution.
#    * Neither the name of Google Inc. nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.

# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#
# YAML anchor to keep configuration DRY.
#
common: &common
  # This conforms to Go workspace requirements (we are pre-modules).
  working_directory: /go/src/github.com/pekhulia/dbbench
  steps:
    - checkout
    - run:
        name: Go version
        command: go version
    - run:
        name: Get dependencies
        command: go get -v ./...
    - run:
        name: Run unit tests
        command: go test -v ./...

common_modules: &common_modules
  steps:
    - checkout
    - run:
        name: Go version
        command: go version
    - run:
        name: Run unit tests
        command: go test -v ./...


#
# CircleCI.
#
version: 2

jobs:
  go-1.10:
    docker:
      - image: circleci/golang:1.10
    <<: *common
  go-1.11:
    docker:
      - image: circleci/golang:1.11
    <<: *common
  go-1.12:
    docker:
      - image: circleci/golang:1.12
    <<: *common
  go-1.14:
    docker:
      - image: circleci/golang:1.14
    <<: *common
  go-1.11_modules:
    docker:
      - image: circleci/golang:1.11
    <<: *common_modules
  go-1.12_modules:
    docker:
      - image: circleci/golang:1.12
    <<: *common_modules
  go-1.14_modules:
    docker:
      - image: circleci/golang:1.14
    <<: *common_modules
  go-latest_modules:
    docker:
      - image: circleci/golang:latest
    <<: *common_modules

workflows:
  version: 2
  test:
    # These will run in parallel.
    jobs:
      - go-1.10
      - go-1.11
      - go-1.12
      - go-1.14
      - go-1.11_modules
      - go-1.12_modules
      - go-1.14_modules
      - go-latest_modules
